package derivation

import (
	"context"
	"crypto/ecdsa"
	"encoding/json"
	"fmt"
	"github.com/morph-l2/bindings/bindings"
	"github.com/scroll-tech/go-ethereum/common/hexutil"
	"github.com/scroll-tech/go-ethereum/eth"
	"math"
	"math/big"
	"os"
	"reflect"
	"strings"
	"testing"

	"github.com/morph-l2/node/types"
	"github.com/scroll-tech/go-ethereum"
	"github.com/scroll-tech/go-ethereum/accounts/abi/bind"
	"github.com/scroll-tech/go-ethereum/accounts/abi/bind/backends"
	"github.com/scroll-tech/go-ethereum/common"
	"github.com/scroll-tech/go-ethereum/core"
	"github.com/scroll-tech/go-ethereum/core/rawdb"
	"github.com/scroll-tech/go-ethereum/ethclient"
	"github.com/scroll-tech/go-ethereum/ethclient/authclient"
	"github.com/scroll-tech/go-ethereum/ethdb"
	"github.com/scroll-tech/go-ethereum/rpc"
	"github.com/stretchr/testify/require"
	tmlog "github.com/tendermint/tendermint/libs/log"
)

func TestCompareBlock(t *testing.T) {
	eClient, err := ethclient.Dial("http://localhost:7545")
	require.NoError(t, err)
	l2Client, err := ethclient.Dial("http://localhost:8545")
	blockNumber, err := eClient.BlockNumber(context.Background())
	require.NoError(t, err)
	for i := 0; i < int(blockNumber); i++ {
		block, err := l2Client.BlockByNumber(context.Background(), big.NewInt(int64(i)))
		require.NoError(t, err)
		dBlock, err := eClient.BlockByNumber(context.Background(), big.NewInt(int64(i)))
		require.True(t, reflect.DeepEqual(block.Header(), dBlock.Header()))
	}
}

func testNewDerivationClient(t *testing.T) *Derivation {
	ctx := context.Background()
	l1Client, err := ethclient.Dial("http://localhost:9545")
	addr := common.HexToAddress("0x6900000000000000000000000000000000000010")
	require.NoError(t, err)
	var secret [32]byte
	jwtSecret := common.FromHex(strings.TrimSpace("688f5d737bad920bdfb2fc2f488d6b6209eebda1dae949a8de91398d932c517a"))
	require.True(t, len(jwtSecret) == 32)
	copy(secret[:], jwtSecret)
	aClient, err := authclient.DialContext(context.Background(), "http://localhost:7551", secret)
	require.NoError(t, err)
	eClient, err := ethclient.Dial("http://localhost:7545")
	require.NoError(t, err)
	d := Derivation{
		ctx:                   ctx,
		l1Client:              l1Client,
		RollupContractAddress: addr,
		confirmations:         rpc.BlockNumber(5),
		l2Client:              types.NewRetryableClient(aClient, eClient, tmlog.NewTMLogger(tmlog.NewSyncWriter(os.Stdout))),
		validator:             nil,
		latestDerivation:      9,
		fetchBlockRange:       100,
		pollInterval:          1,
	}
	return &d
}

func TestFetchRollupData(t *testing.T) {
	d := testNewDerivationClient(t)
	logs, err := d.fetchRollupLog(context.Background(), 1, 1000)
	require.NoError(t, err)
	for _, lg := range logs {
		rollupData, err := d.fetchRollupDataByTxHash(lg.TxHash, lg.BlockNumber)
		if err != nil {
			d.logger.Error("fetch rollup data failed", "txHash", lg.TxHash, "blockNumber", lg.BlockNumber)
			return
		}
		d.logger.Info("fetch rollup transaction success", "txNonce", rollupData.Nonce, "txHash", rollupData.TxHash,
			"l1BlockNumber", rollupData.L1BlockNumber, "firstL2BlockNumber", rollupData.FirstBlockNumber, "lastL2BlockNumber", rollupData.LastBlockNumber)

	}
}

func newSimulatedBackend(key *ecdsa.PrivateKey) (*backends.SimulatedBackend, ethdb.Database) {
	var gasLimit uint64 = 9_000_000
	auth, _ := bind.NewKeyedTransactorWithChainID(key, big.NewInt(1337))
	genAlloc := make(core.GenesisAlloc)
	genAlloc[auth.From] = core.GenesisAccount{Balance: big.NewInt(9223372036854775807)}
	db := rawdb.NewMemoryDatabase()
	sim := backends.NewSimulatedBackendWithDatabase(db, genAlloc, gasLimit)
	return sim, db
}

func TestFindBatchIndex(t *testing.T) {
	d := testNewDerivationClient(t)
	query := ethereum.FilterQuery{
		FromBlock: big.NewInt(0).SetUint64(1),
		ToBlock:   big.NewInt(0).SetUint64(2000),
		Addresses: []common.Address{
			d.RollupContractAddress,
		},
		Topics: [][]common.Hash{
			{RollupEventTopicHash},
		},
	}
	rollup, err := bindings.NewRollup(d.RollupContractAddress, d.l1Client)
	require.NoError(t, err)
	d.rollup = rollup
	logs, err := d.l1Client.FilterLogs(context.Background(), query)
	require.NoError(t, err)
	require.True(t, len(logs) != 0)
	for _, lg := range logs {
		batchIndex, err := d.findBatchIndex(lg.TxHash, 20)
		if err != nil {
			continue
		}
		require.NotZero(t, batchIndex)
		break
	}
}

func TestNewDerivationClient(t *testing.T) {
	//firstInput := ""
	//
	//decodefirstInput, err := hexutil.Decode(firstInput)
	//abi, err := bindings.RollupMetaData.GetAbi()
	//require.NoError(t, err)
	//args, err := abi.Methods["commitBatch"].Inputs.Unpack(decodefirstInput[4:])
	//require.NoError(t, err)
	//// parse calldata to rollup batch data
	//fetchBatch := newRollupData(58, common.HexToHash("0x6f74f717059c77203c6518ab345f60757f3a9903f6331bb2c8ebcba02dab6735"), 1)
	//d := testNewDerivationClient(t)
	//err = parseBatch(args, fetchBatch)
	//require.NoError(t, err)
}

func TestDecodeChunk(t *testing.T) {

	var batch_json = "{\"version\":0,\"parentBatchHeader\":\"0x000000000000001cd5000000000000000000000000000000037ac7e7113944dba111bcb9cc6bb07236499686717a778fc2dee94e3c95e9c537c1cea06aa3f93eb6501b097391a6df751f49f8094161968acde577ab5373aa2f\",\"chunks\":[\"0x0100000000000090260000000065713f8c0000000000000000000000000000000000000000000000000000000000000000000000000098968000000000\",\"0x0100000000000090270000000065713f8d0000000000000000000000000000000000000000000000000000000000000000000000000098968000000000\",\"0x0100000000000090280000000065713f8e0000000000000000000000000000000000000000000000000000000000000000000000000098968000000000\",\"0x0100000000000090290000000065713f900000000000000000000000000000000000000000000000000000000000000000000000000098968000000000\",\"0x01000000000000902a0000000065713f910000000000000000000000000000000000000000000000000000000000000000000000000098968000000000\"],\"skippedL1MessageBitmap\":\"0x\",\"prevStateRoot\":\"0x2e5e1d0e6466f321f3e3840f30ecb7608d1256029da94911835b5e06f6dc38b8\",\"postStateRoot\":\"0x2e5e1d0e6466f321f3e3840f30ecb7608d1256029da94911835b5e06f6dc38b8\",\"withdrawRoot\":\"0x27ae5ba08d7291c96c8cbddcc148bf48a6d68c7974b94356f53754ef6171d757\",\"signatures\":[{\"version\":1,\"signer\":0,\"signerPubKey\":\"0x00000000000000000000000000000000095ad465c2895ee825c7d4f1b60a18734db57d4108369e47c6e3a94ee15846f825c06dad5d98f503bd31ece1d9f94b11000000000000000000000000000000000c5d6ba04bc9b9674dd2acbfc5caed3976c1b8be2ec90a03d78dffe924648b4fba82225aff43c744310c6a60185b75ac000000000000000000000000000000000fce6be001c871a11b9db1c6c15f0a6999de5646941a74486206dc784f0b3ffe11799212f3f44ef754b4a0f1ecf85639000000000000000000000000000000000b2f06634e5ea719682c30911c94dfb560f0b7656b5c34a871ea035e3fe7b041885420f8fe1e251f1cce5cdb7514869e\",\"signature\":\"0x050be97fd4b7ceb584997b1d2e47d5e96b9794772e97f02094a99f86db1c229cbc994ab4871d02588586bd55e524edc0072c6b479154390277c24d76acd6197c1e454028406f4b8e35ba0f7f9986459d293e4dbc3a224e89e1e0eda3d352ce8c\"},{\"version\":1,\"signer\":1,\"signerPubKey\":\"0x0000000000000000000000000000000010173aeac4ff317e8e60493f962b91dbd27614e1f6594e17d18a02968bd1fd698b6703092ab8622cd22d6948d9421156000000000000000000000000000000000801aea15697ab4d7a808be45377e4f0d2f54857fdc04031e476402ff16c66a6cbcc5f09a84bf85400c8afbabed006600000000000000000000000000000000015fc71b2c4e81148274e6169c9c9aace8c34fa6030547650242b6c32527dd23a996416e32640bce4f495a0afabc7dbb900000000000000000000000000000000088c4a0dffccc96bce47aef0e176b129457a5f3ae1651b132ddb418e9f7b5850a38c6fec1be6d169eb88dc1619648bf4\",\"signature\":\"0x12f38e4123ac97a630956b16ed99b2785fd6b79e5c860a5e072c781bad3f0d1f43bff5702bef1cf15bbe2d25cb1bb4b7172a14e01c6fcd02c322d6dfe28aab910aad9e74cca267b88472b7bab15f923bfcd73112cb8d1bb86b23f8f9348f4b07\"},{\"version\":1,\"signer\":2,\"signerPubKey\":\"0x0000000000000000000000000000000003fd9468a8ceffc1b696874517777ef8bfdc9a1bade95c480ee2624903e648c1caf01c65de5b4fda8876a3a0e8d9f0890000000000000000000000000000000004c02f3609a0f61d12fe737dcbb047d5253bd3ff905b55c0e0f932b476fd77d172a58b72ef0f506407870988dd6038220000000000000000000000000000000017fa5765899f60f7a58f8ccdaaa295cde55992231710672692ba6a71a4faa9572f728f438ded65576a570d57e19fd304000000000000000000000000000000001226138813bde98af3464ed03649d8c731bc4e5cb3d26b53bf7483f4105d18bbb3f19e23905119e156e7d003d2fd125c\",\"signature\":\"0x15dbef0514d64625da2003ae21bccfbb52009281f5a98549df44c6a848223bb08fc334b9e7e92a1ffcacac52e8dc7e52106f125eb4ea87138660a501bb7eaedb437908046ecafa6717aad16f52c02965dab76d2d1968a6f37bab029df655f68c\"},{\"version\":1,\"signer\":3,\"signerPubKey\":\"0x00000000000000000000000000000000109bf02a2636c0dc1968b0a50db77251eb090c3e9f51e2a2bc60c4ac72213f41f01f0a34e92c2e0625bd62e28e27edb500000000000000000000000000000000139969bd92522113c0615659874d1fae311ad8152d0584c7b57ffc14927067486dcf86413c5684fccc1163ee2d45c1c1000000000000000000000000000000000f172603f70a0730d100ad6d28bde477195987062e8ade83b82d093935d956ff20ca768c26263577b094f1cb756adc400000000000000000000000000000000010dde3acca00b4ff1b4976500a8f97e92246f43f78cadc95c4993dfc4f4c501c33d42a4bf52587f4931287b59623149c\",\"signature\":\"0x0cf613d3874638a2a0fc3ecc96ade95e704a8c3604770a14f09fb81bd4fde3563a21767e295c4d16c42b055ff89217a60b5acb1d0107620aaf102ee7a8889171a682e50f7bff8566ee27a0a77bd10e347dd7636447fe394b44c90f1a91a85f8e\"}]}"
	var batch eth.RPCRollupBatch
	err := json.Unmarshal([]byte(batch_json), &batch)
	require.NoError(t, err)
	str := "0x01000000000000902a0000000065713f910000000000000000000000000000000000000000000000000000000000000000000000000098968000000000"
	fmt.Println("str len:", len(str))
	fmt.Println("max uint8:", math.MaxUint8)
	rollupData := newRollupData(9999, common.BytesToHash([]byte{}), 0)
	err = parseBatch(batch, rollupData)
	if err != nil {
		fmt.Printf("parseBatch err:%+v\n", err)
	}
	require.NoError(t, err)
	fmt.Printf("rollupData:%+v\n", rollupData)
}

func TestName(t *testing.T) {
	abi, err := bindings.RollupMetaData.GetAbi()
	require.NoError(t, err)
	hexData := "0x4c4b9e4f00000000000000000000000000000000000000000000000000000000000000601d4ceff4b2335970615354f0a03e2124745d1c193d509e9109e4910b869448ce27ae5ba08d7291c96c8cbddcc148bf48a6d68c7974b94356f53754ef6171d7570000000000000000000000000000000000000000000000000000000000000059000000000000000000000000000000000000000000000000008cb3decea512e30f962b50492fee707a926cd3465d2ac9b2b9655553a915578d000000000000000000000000000000000000000000000000000000000000000000000000000000E"
	hexData = "0x16b799c9000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000002201d4ceff4b2335970615354f0a03e2124745d1c193d509e9109e4910b869448ce0f199dc7fb956c94a69ba951785dae12d9d6c7ed3073dd5a5453151d9996a25127ae5ba08d7291c96c8cbddcc148bf48a6d68c7974b94356f53754ef6171d75700000000000000000000000000000000000000000000000000000000000002600000000000000000000000000000000000000000000000000000000000000059000000000000000000000000000000000000000000000000008cb3decea512e30f962b50492fee707a926cd3465d2ac9b2b9655553a915578d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000003d010000000000000001000000006570805bbc55b7eb2a19d020541768ca2c88e9feed6df90edc34e7aac67e1c2ae0a2ae72e2b381671f72bf2067d74ab0c11a91000000000000000000000000000000000fbdc060a4fd3fb5923c5ff9a430acdba1fbc17136e76cb85af00b274dfeaed8ce982afd68ffea340dd71c1391e31ad3"
	txData, err := hexutil.Decode(hexData)
	require.NoError(t, err)
	args, err := abi.Methods["commitBatch"].Inputs.Unpack(txData[4:])
	rollupBatchData := args[0].(struct {
		Version                uint8     "json:\"version\""
		ParentBatchHeader      []uint8   "json:\"parentBatchHeader\""
		Chunks                 [][]uint8 "json:\"chunks\""
		SkippedL1MessageBitmap []uint8   "json:\"skippedL1MessageBitmap\""
		PrevStateRoot          [32]uint8 "json:\"prevStateRoot\""
		PostStateRoot          [32]uint8 "json:\"postStateRoot\""
		WithdrawalRoot         [32]uint8 "json:\"withdrawalRoot\""
		Signature              struct {
			Version   *big.Int   "json:\"version\""
			Signers   []*big.Int "json:\"signers\""
			Signature []uint8    "json:\"signature\""
		} "json:\"signature\""
	})

	var chunks []hexutil.Bytes
	for _, chunk := range rollupBatchData.Chunks {
		chunks = append(chunks, chunk)
	}
	batch := eth.RPCRollupBatch{
		Version:                uint(rollupBatchData.Version),
		ParentBatchHeader:      rollupBatchData.ParentBatchHeader,
		Chunks:                 chunks,
		SkippedL1MessageBitmap: rollupBatchData.SkippedL1MessageBitmap,
		PrevStateRoot:          common.BytesToHash(rollupBatchData.PrevStateRoot[:]),
		PostStateRoot:          common.BytesToHash(rollupBatchData.PostStateRoot[:]),
		WithdrawRoot:           common.BytesToHash(rollupBatchData.WithdrawalRoot[:]),
	}
	rollupData := newRollupData(9999, common.BytesToHash([]byte{}), 0)
	err = parseBatch(batch, rollupData)
	require.NoError(t, err)
	fmt.Println(args)
}

func TestNameT(t *testing.T) {
	s := []int{1, 2, 3}
	fmt.Println(s[0:0])
}
